<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>DongWei&#39;s Blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.mr-dongw.site/"/>
  <updated>2017-04-10T14:31:22.000Z</updated>
  <id>http://www.mr-dongw.site/</id>
  
  <author>
    <name>Mr-Vincent</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ftpserver（Ⅳ）</title>
    <link href="http://www.mr-dongw.site/2017/04/10/ftpserver4/"/>
    <id>http://www.mr-dongw.site/2017/04/10/ftpserver4/</id>
    <published>2017-04-10T14:29:59.000Z</published>
    <updated>2017-04-10T14:31:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天就来谈谈FtpServer中的线程模型，准确来讲是MINA中的线程模型。之前一直关注于FtpServer的实现逻辑，却没去在意NIO底层的这些设计。<br><a id="more"></a><br>先看看我们用MINA简单实现一个server<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">public static void main(String[] args) throws IOException &#123;</div><div class="line"></div><div class="line">        SocketAcceptor socketAcceptor = new NioSocketAcceptor();</div><div class="line"></div><div class="line">        //加上一个编码过滤器，不然客户端输入的什么服务端看到的都是buf</div><div class="line">        socketAcceptor.getFilterChain().addLast(&quot;codec&quot;, new ProtocolCodecFilter(new MyCodecFactory()));</div><div class="line">        socketAcceptor.getFilterChain().addLast(&quot;log&quot;, new LoggingFilter());</div><div class="line"></div><div class="line">        socketAcceptor.setHandler(new MyHandler());</div><div class="line"></div><div class="line">        socketAcceptor.bind(new InetSocketAddress(&quot;localhost&quot;,9090));</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>上述代码中只加入了log过滤器和编码过滤器，实际上什么都不加也是可以完成启动服务器监听的。然后启动服务器我们用telnet命令去连接它，多用几个命令窗口去连接，在控制台上可以看到这样的  </p>
<blockquote>
<p>[NioProcessor-2][FTP]21:31:35,053 INFO [LoggingFilter.log]:186 - CREATED<br>created<br>[NioProcessor-2][FTP]21:31:35,058 INFO [LoggingFilter.log]:186 - OPENED</p>
</blockquote>
<p>这里我们设置了日志的格式，将最前面的置为当前线程的名称。我们再启动一个客户端去连接：</p>
<blockquote>
<p>[NioProcessor-3][FTP]21:33:14,655 DEBUG [ProtocolCodecFilter.messageReceived]:211 - Processing a MESSAGE_RECEIVED for session 2<br>[NioProcessor-3][FTP]21:33:14,657 INFO [LoggingFilter.log]:157 - RECEIVED: dada  </p>
</blockquote>
<p>很明显可以看到NioProcessor变了。如此往复，不断去启动命令行客户端去连，会发现NioProcessor后的编号只会从1到5。也许你会觉得奇怪，难道用于处理连接的线程数只有5个吗？没错，如果不对其进行设置默认就是这么多个：cpu核数加1个。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">/** The default pool size, when no size is provided. */</div><div class="line">private static final int DEFAULT_SIZE = Runtime.getRuntime().availableProcessors() + 1;</div></pre></td></tr></table></figure></p>
<p>这就可以聊到MINA中的线程模型了。它用于处理IO用NioProcessor来，处理handler用其他的线程来。到底怎么去用呢？<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">public static void main(String[] args) throws IOException &#123;</div><div class="line"></div><div class="line">        SocketAcceptor socketAcceptor = new NioSocketAcceptor();</div><div class="line"></div><div class="line">        //加上一个编码过滤器，不然客户端输入的什么服务端看到的都是buf</div><div class="line">        socketAcceptor.getFilterChain().addLast(&quot;codec&quot;, new ProtocolCodecFilter(new MyCodecFactory()));</div><div class="line">        socketAcceptor.getFilterChain().addLast(&quot;log&quot;, new LoggingFilter());</div><div class="line">        //添加Executor过滤器，让其线程池处理业务逻辑</div><div class="line">        socketAcceptor.getFilterChain().addLast(&quot;threadPool&quot;, new ExecutorFilter(Executors.newCachedThreadPool()));</div><div class="line"></div><div class="line">        socketAcceptor.setHandler(new MyHandler());</div><div class="line"></div><div class="line">        socketAcceptor.bind(new InetSocketAddress(&quot;localhost&quot;,9090));</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>这时候再启动telnet客户端去访问服务器，控制台下打印的就是这样了：</p>
<blockquote>
<p>[pool-3-thread-1][FTP]21:51:41,436 DEBUG [IoFilterEvent.fire]:117 - Event MESSAGE_RECEIVED has been fired for session 1</p>
</blockquote>
<p>因此验证了业务逻辑的处理线程不再又那可怜巴巴的只有5个处理IO连接的来分担了，而是由额外的线程来处理，至于这些线程是否和处理IO线程来自同一个线程池我没有仔细去研究。同时，这里还有一个线程值得关注：NioSocketAcceptor-1（使用jvisualvm可以看到所有线程）这个用于监听所有连接事件，只有一个。其中涉及到了什么selector模型什么的就不继续深入了。事件到达后将其封装成IoSession丢给IoProcessor处理，然后继续站岗监听，啥子都不管了，就做这一件事情。<br>这让我不禁想到一个问题，NIo模型中没有对每个连接开辟线程去处理，只用一个线程去响应连接事件，后续的都交给其他线程去处理，那么如果连接的数量很多，岂不是也需要很多线程去处理这些请求了？优势又在哪里呢？</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天就来谈谈FtpServer中的线程模型，准确来讲是MINA中的线程模型。之前一直关注于FtpServer的实现逻辑，却没去在意NIO底层的这些设计。&lt;br&gt;
    
    </summary>
    
      <category term="Apache Open Project" scheme="http://www.mr-dongw.site/categories/Apache-Open-Project/"/>
    
    
      <category term="源码解读" scheme="http://www.mr-dongw.site/tags/%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/"/>
    
      <category term="Apache" scheme="http://www.mr-dongw.site/tags/Apache/"/>
    
  </entry>
  
  <entry>
    <title>牢骚一篇</title>
    <link href="http://www.mr-dongw.site/2017/04/09/%E7%89%A2%E9%AA%9A%E4%B8%80%E7%AF%87/"/>
    <id>http://www.mr-dongw.site/2017/04/09/牢骚一篇/</id>
    <published>2017-04-09T03:56:18.000Z</published>
    <updated>2017-04-09T03:57:30.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>生活不仅有眼前的苟且，还有诗和远。</p>
</blockquote>
<p>在以前看到这句话的时候，觉得写得真好，给人一种特积极向上的正能量。<a id="more"></a>现在看来无非就是一种自我欺骗。或许改为“生活不仅有眼前的苟且，还有明天和后天的苟且”会更加贴近我现在的生活状态。<br>最近陷入了一种焦虑状态，每天都很担心害怕，但是也不知道具体是在担心害怕什么。具体表现就是周末担心周一，平时担心下班要加班，每天都战战兢兢的，只期望早点过完这一天。周末又担心下周一要忙的事。真是非常难受，负能量满满。<br>具体说来我觉得还是对现状不是很满意，渴望改变！<br>其实脑袋里就是一片混浊，自己到底想要什么都没搞明白，对周围的人和事真的是一点都不关心，我觉得我活在自己的封闭的世界里，找不到出路。最直观的感受就是对很多事情都没有什么兴趣了，以前还想着怎么出去走走，去旅行，去别的地方看看。现在完全没有这样的想法。以前还会想着怎么去遇见那些有趣的人，怎么和他们做朋友，现在觉得自己一个人安安静静呆着挺好的。也不愿意去主动联系一些人了，也不会主动去分享自己的生活了，每天都是天昏地暗的稀里糊涂的在过着操蛋的日子。不知道还要过多久我才会被这种生活给麻痹，然后失去知觉变成一只如同行尸走肉的僵尸一般苟活于世。<br>我觉得我依旧没变，至少内心的想法没有变，我每天都在想着改变，摆脱现在的羁绊，努力去最求自己内心所想的东西，努力去成为最想成为的人，一步一步走下去。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;生活不仅有眼前的苟且，还有诗和远。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在以前看到这句话的时候，觉得写得真好，给人一种特积极向上的正能量。
    
    </summary>
    
      <category term="想法" scheme="http://www.mr-dongw.site/categories/%E6%83%B3%E6%B3%95/"/>
    
    
      <category term="生活，扯淡" scheme="http://www.mr-dongw.site/tags/%E7%94%9F%E6%B4%BB%EF%BC%8C%E6%89%AF%E6%B7%A1/"/>
    
  </entry>
  
  <entry>
    <title>ftpserver(Ⅲ)</title>
    <link href="http://www.mr-dongw.site/2017/04/04/ftpserver3/"/>
    <id>http://www.mr-dongw.site/2017/04/04/ftpserver3/</id>
    <published>2017-04-04T03:09:41.000Z</published>
    <updated>2017-04-04T03:10:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>此篇文章来解读ftpserver中的核心组件–FtpServerContext<br>在很多类中都有看到这个东西，顾名思义就是上下文。根据以往的在java web中的servlet context的理解，字面意思就是上下文。<a id="more"></a>我觉得这个翻译不是很好，通过字面意思真的很难去理解这个“上下文”是什么。反而久而久之懂其中的含义了，却难以用语言描述出来。所以说翻译不准确很害人啊。最简单粗暴的方法就是去看文档注释，拒绝二手解释。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">/**</div><div class="line"> * </div><div class="line"> * This is basically &lt;code&gt;org.apache.ftpserver.ftplet.FtpletContext&lt;/code&gt; with</div><div class="line"> * added connection manager, message resource functionalities.</div><div class="line"> *</div><div class="line"> */</div><div class="line">public interface FtpServerContext extends FtpletContext &#123;</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * </div><div class="line"> * FTP server configuration implementation. It holds all the components used.</div><div class="line"> */</div><div class="line">public class DefaultFtpServerContext implements FtpServerContext &#123;</div></pre></td></tr></table></figure>
<p>看了文档的注释就很容易去读懂这个”context”是什么玩意儿了。无非就是一些配置而已。“上下文”也可以解释为“运行环境”吧。我个人理解是这个程序在跑的过程中的所需要的材料。类比servlet中，通过上下文可以拿到request、response对象。那也就可以说req、resp是属于servlet运行的材料。<br>FtpServerContext是一个接口，默认实现类是DefaultFtpServerContext：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">public class DefaultFtpServerContext implements FtpServerContext &#123;</div><div class="line"></div><div class="line">    private final Logger LOG = LoggerFactory</div><div class="line">            .getLogger(DefaultFtpServerContext.class);</div><div class="line"></div><div class="line">    private MessageResource messageResource = new MessageResourceFactory().createMessageResource();</div><div class="line"></div><div class="line">    private UserManager userManager = new PropertiesUserManagerFactory().createUserManager();</div><div class="line"></div><div class="line">    private FileSystemFactory fileSystemManager = new NativeFileSystemFactory();</div><div class="line"></div><div class="line">    private FtpletContainer ftpletContainer = new DefaultFtpletContainer();</div><div class="line"></div><div class="line">    private FtpStatistics statistics = new DefaultFtpStatistics();</div><div class="line"></div><div class="line">    private CommandFactory commandFactory = new CommandFactoryFactory().createCommandFactory();</div><div class="line"></div><div class="line">    private ConnectionConfig connectionConfig = new ConnectionConfigFactory().createConnectionConfig();</div><div class="line"></div><div class="line">    private Map&lt;String, Listener&gt; listeners = new HashMap&lt;String, Listener&gt;();</div><div class="line"></div><div class="line">    private static final List&lt;Authority&gt; ADMIN_AUTHORITIES = new ArrayList&lt;Authority&gt;();</div><div class="line">    private static final List&lt;Authority&gt; ANON_AUTHORITIES = new ArrayList&lt;Authority&gt;();</div><div class="line">    </div><div class="line">    /**</div><div class="line">     * The thread pool executor to be used by the server using this context</div><div class="line">     */</div><div class="line">    private ThreadPoolExecutor threadPoolExecutor = null;</div><div class="line">    </div><div class="line">    static &#123;</div><div class="line">        ADMIN_AUTHORITIES.add(new WritePermission());</div><div class="line">        </div><div class="line">        ANON_AUTHORITIES.add(new ConcurrentLoginPermission(20, 2));</div><div class="line">        ANON_AUTHORITIES.add(new TransferRatePermission(4800, 4800));</div><div class="line">    &#125;</div><div class="line">    //...省略...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这个类中包含了有很多成员变量，有消息资源的MessageResource，这个主要是用于读取ftpserver中配置的资源，类似于ftp响应502对应的文字描述这样的。并没有将这些东西硬编码，而是抽象成资源，通过文本文件去配置。UserManager用于对用户的管理，比方说哪些用户有访问的权限等。FileSystemFactory是管理文件的，不同用户的权限可能是不同的，看到的目录也有可能是不同的。FtpletContainer这个说不清楚，暂时别去管这个，后面再说。FtpStatistics这个类主要是记录各种数据，比如当前连接数，登录用户数等。CommandFactory这个很容易说了，命令工厂，上篇文章中说到根据客户端指令不同创建各种命令实例来分别处理。ConnectionConfig用于对socket的连接管理。<br>除了这些还有一个map和2个list：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">private Map&lt;String, Listener&gt; listeners = new HashMap&lt;String, Listener&gt;();</div><div class="line">private static final List&lt;Authority&gt; ADMIN_AUTHORITIES = new ArrayList&lt;Authority&gt;();</div><div class="line">private static final List&lt;Authority&gt; ANON_AUTHORITIES = new ArrayList&lt;Authority&gt;();</div></pre></td></tr></table></figure></p>
<p>listeners在context初始化的时候放进去一个default的listener，也就是NioListener的实例。只是通过工厂方式去创建的。而其他2个list则是用来装admin的权限和anon的权限：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">static &#123;</div><div class="line">        ADMIN_AUTHORITIES.add(new WritePermission());</div><div class="line">        </div><div class="line">        ANON_AUTHORITIES.add(new ConcurrentLoginPermission(20, 2));</div><div class="line">        ANON_AUTHORITIES.add(new TransferRatePermission(4800, 4800));</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>在类装载的时候就将权限加进去了，admin有写权限，anon有并发登录权限，其中还对anon进行了一个传输速率的配置。<br>至此，这个“神秘”的context就基本上梳理完了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;此篇文章来解读ftpserver中的核心组件–FtpServerContext&lt;br&gt;在很多类中都有看到这个东西，顾名思义就是上下文。根据以往的在java web中的servlet context的理解，字面意思就是上下文。
    
    </summary>
    
      <category term="Apache Open Project" scheme="http://www.mr-dongw.site/categories/Apache-Open-Project/"/>
    
    
      <category term="源码解读" scheme="http://www.mr-dongw.site/tags/%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/"/>
    
      <category term="Apache" scheme="http://www.mr-dongw.site/tags/Apache/"/>
    
  </entry>
  
  <entry>
    <title>FtpServer(Ⅱ)</title>
    <link href="http://www.mr-dongw.site/2017/03/26/ftpserver2-md/"/>
    <id>http://www.mr-dongw.site/2017/03/26/ftpserver2-md/</id>
    <published>2017-03-26T08:27:41.000Z</published>
    <updated>2017-03-26T08:36:33.000Z</updated>
    
    <content type="html"><![CDATA[<p>有了之前的总体小窥后，现在开始细细把玩其中的深邃之处了。<br>其中可以看到有不少的factory，比如FtpServerFactory、ListenerFactory等。通过名字可以看得出来，这些都是用来产生实例的工厂。<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">public Listener createListener() &#123;</div><div class="line">        try &#123;</div><div class="line">            InetAddress.getByName(serverAddress);</div><div class="line">        &#125; catch (UnknownHostException e) &#123;</div><div class="line">            throw new FtpServerConfigurationException(&quot;Unknown host&quot;, e);</div><div class="line">        &#125;</div><div class="line">        // Deal with the old style black list and new session Filter here.</div><div class="line">        if (sessionFilter != null) &#123;</div><div class="line">            if (blockedAddresses != null || blockedSubnets != null) &#123;</div><div class="line">                throw new IllegalStateException(</div><div class="line">                        &quot;Usage of SessionFilter in combination with blockedAddesses/subnets is not supported. &quot;);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        if (blockedAddresses != null || blockedSubnets != null) &#123;</div><div class="line">            return new NioListener(serverAddress, port, implicitSsl, ssl,</div><div class="line">                    dataConnectionConfig, idleTimeout, blockedAddresses,</div><div class="line">                    blockedSubnets);</div><div class="line">        &#125; else &#123;</div><div class="line">            return new NioListener(serverAddress, port, implicitSsl, ssl,</div><div class="line">                    dataConnectionConfig, idleTimeout, sessionFilter);</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>这个listenerfactory通过createListener创建listener。同理serverFactory也是一样。<br>先看看listener工场有哪些成员变量：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">private String serverAddress;</div><div class="line">    //端口默认是21，本地部署会有权限冲突</div><div class="line">    private int port = 21;</div><div class="line">    //加密配置，暂时不管</div><div class="line">    private SslConfiguration ssl;</div><div class="line"></div><div class="line">    private boolean implicitSsl = false;</div><div class="line"></div><div class="line">    private DataConnectionConfiguration dataConnectionConfig = new DataConnectionConfigurationFactory()</div><div class="line">            .createDataConnectionConfiguration();</div><div class="line"></div><div class="line">    private int idleTimeout = 300;</div><div class="line">    //黑名单</div><div class="line">    private List&lt;InetAddress&gt; blockedAddresses;</div><div class="line">    private List&lt;Subnet&gt; blockedSubnets;</div><div class="line">    </div><div class="line">    /**</div><div class="line">     * The Session filter</div><div class="line">     * 过滤器</div><div class="line">     */</div><div class="line">    private SessionFilter sessionFilter = null;</div></pre></td></tr></table></figure></p>
<p>最重要的还是哪个createListener方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">return new NioListener(serverAddress, port, implicitSsl, ssl,</div><div class="line">                    dataConnectionConfig, idleTimeout, sessionFilter);</div></pre></td></tr></table></figure></p>
<p>最后返回的是一个NioListener。这个工厂只创建Niolistener。<br>具体到NioListener就涉及到MINA了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">public class NioListener extends AbstractListener</div></pre></td></tr></table></figure></p>
<p>这里有个重要的接口就是Listener，AbstractListener实现了这个接口：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">void start(FtpServerContext serverContext);</div><div class="line">void stop();</div><div class="line">boolean isStopped();</div><div class="line">void suspend();</div><div class="line">void resume();</div><div class="line">boolean isSuspended();</div><div class="line">Set&lt;FtpIoSession&gt; getActiveSessions();</div><div class="line">boolean isImplicitSsl();</div><div class="line">SslConfiguration getSslConfiguration();</div><div class="line">int getPort();</div><div class="line">String getServerAddress();</div><div class="line">DataConnectionConfiguration getDataConnectionConfiguration();</div><div class="line">int getIdleTimeout();</div><div class="line">@Deprecated</div><div class="line">List&lt;InetAddress&gt; getBlockedAddresses();</div><div class="line"></div><div class="line">@Deprecated</div><div class="line">List&lt;Subnet&gt; getBlockedSubnets();</div><div class="line"></div><div class="line"></div><div class="line">SessionFilter getSessionFilter();</div></pre></td></tr></table></figure></p>
<p>无非就是定义了一些关于服务器监听状态的控制。<br>再看看Niolistenre中的核心方法start<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div></pre></td><td class="code"><pre><div class="line">public synchronized void start(FtpServerContext context) &#123;</div><div class="line">        if(!isStopped()) &#123;</div><div class="line">            // listener already started, don&apos;t allow</div><div class="line">            throw new IllegalStateException(&quot;Listener already started&quot;);</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        try &#123;</div><div class="line">            </div><div class="line">            this.context = context;</div><div class="line"></div><div class="line">            //创建一个acceptor，用来监听连接</div><div class="line">            acceptor = new NioSocketAcceptor(Runtime.getRuntime()</div><div class="line">                    .availableProcessors());</div><div class="line">    </div><div class="line">            if (getServerAddress() != null) &#123;</div><div class="line">                address = new InetSocketAddress(getServerAddress(), getPort());</div><div class="line">            &#125; else &#123;</div><div class="line">                address = new InetSocketAddress(getPort());</div><div class="line">            &#125;</div><div class="line">    </div><div class="line">            acceptor.setReuseAddress(true);</div><div class="line">            acceptor.getSessionConfig().setReadBufferSize(2048);</div><div class="line">            acceptor.getSessionConfig().setIdleTime(IdleStatus.BOTH_IDLE,</div><div class="line">                    getIdleTimeout());</div><div class="line">            // Decrease the default receiver buffer size</div><div class="line">            acceptor.getSessionConfig().setReceiveBufferSize(512);</div><div class="line">    </div><div class="line">            MdcInjectionFilter mdcFilter = new MdcInjectionFilter();</div><div class="line"></div><div class="line">            //添加一系列过滤器链</div><div class="line">            acceptor.getFilterChain().addLast(&quot;mdcFilter&quot;, mdcFilter);</div><div class="line"></div><div class="line">            SessionFilter sessionFilter = getSessionFilter();</div><div class="line">            if (sessionFilter != null) &#123;</div><div class="line">                // add and IP filter to the filter chain.</div><div class="line">                acceptor.getFilterChain().addLast(&quot;sessionFilter&quot;,</div><div class="line">                        new MinaSessionFilter(sessionFilter));</div><div class="line">            &#125;</div><div class="line">    </div><div class="line">            acceptor.getFilterChain().addLast(&quot;threadPool&quot;,</div><div class="line">                    new ExecutorFilter(context.getThreadPoolExecutor()));</div><div class="line">            acceptor.getFilterChain().addLast(&quot;codec&quot;,</div><div class="line">                    new ProtocolCodecFilter(new FtpServerProtocolCodecFactory()));</div><div class="line">            acceptor.getFilterChain().addLast(&quot;mdcFilter2&quot;, mdcFilter);</div><div class="line">            acceptor.getFilterChain().addLast(&quot;logger&quot;, new FtpLoggingFilter());</div><div class="line"></div><div class="line">            //对ssl的支持</div><div class="line">            if (isImplicitSsl()) &#123;</div><div class="line">                SslConfiguration ssl = getSslConfiguration();</div><div class="line">                SslFilter sslFilter;</div><div class="line">                try &#123;</div><div class="line">                    sslFilter = new SslFilter(ssl.getSSLContext());</div><div class="line">                &#125; catch (GeneralSecurityException e) &#123;</div><div class="line">                    throw new FtpServerConfigurationException(&quot;SSL could not be initialized, check configuration&quot;);</div><div class="line">                &#125;</div><div class="line">    </div><div class="line">                if (ssl.getClientAuth() == ClientAuth.NEED) &#123;</div><div class="line">                    sslFilter.setNeedClientAuth(true);</div><div class="line">                &#125; else if (ssl.getClientAuth() == ClientAuth.WANT) &#123;</div><div class="line">                    sslFilter.setWantClientAuth(true);</div><div class="line">                &#125;</div><div class="line">    </div><div class="line">                if (ssl.getEnabledCipherSuites() != null) &#123;</div><div class="line">                    sslFilter.setEnabledCipherSuites(ssl.getEnabledCipherSuites());</div><div class="line">                &#125;</div><div class="line">    </div><div class="line">                acceptor.getFilterChain().addFirst(&quot;sslFilter&quot;, sslFilter);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            //这里才是正真的核心了，用于处理消息事件</div><div class="line">            handler.init(context, this);</div><div class="line">            acceptor.setHandler(new FtpHandlerAdapter(context, handler));</div><div class="line">    </div><div class="line">            try &#123;</div><div class="line">                //绑定地址端口，然后就开始监听事件了</div><div class="line">                acceptor.bind(address);</div><div class="line">            &#125; catch (IOException e) &#123;</div><div class="line">                throw new FtpServerConfigurationException(&quot;Failed to bind to address &quot; + address + &quot;, check configuration&quot;, e);</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">            updatePort();</div><div class="line">    </div><div class="line">        &#125; catch(RuntimeException e) &#123;</div><div class="line">            // clean up if we fail to start</div><div class="line">            stop();</div><div class="line">            </div><div class="line">            throw e;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>其中使用到的MINA的类NioSocketAcceptor用于创建一个socket监听，说白了就是启动服务器。除了比较关键的filter之外就属handler了。<br>看看其中的一个codec过滤器：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">public class FtpServerProtocolCodecFactory implements ProtocolCodecFactory &#123;</div><div class="line">    private final ProtocolDecoder decoder = new TextLineDecoder(Charset</div><div class="line">            .forName(&quot;UTF-8&quot;));</div><div class="line"></div><div class="line">    private final ProtocolEncoder encoder = new FtpResponseEncoder();</div><div class="line"></div><div class="line">    public ProtocolDecoder getDecoder(IoSession session) throws Exception &#123;</div><div class="line">        return decoder;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public ProtocolEncoder getEncoder(IoSession session) throws Exception &#123;</div><div class="line">        return encoder;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>decode是解码，encode是编码。所谓解码就是服务器相对客户端来说，客户输入的东西我们来解析，相反我们服务器传给客户端的就叫编码了。可以看到，解码使用的是MINA默认的文本解码器，ftp客户端输入的也只是一些文本命令罢了。我们服务端的编码则自己定义了一个FtpResponseEncoder：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">public class FtpResponseEncoder extends ProtocolEncoderAdapter &#123;</div><div class="line">    private static final CharsetEncoder ENCODER = Charset.forName(&quot;UTF-8&quot;)</div><div class="line">            .newEncoder();</div><div class="line"></div><div class="line">    public void encode(IoSession session, Object message,</div><div class="line">            ProtocolEncoderOutput out) throws Exception &#123;</div><div class="line">        String value = message.toString();</div><div class="line"></div><div class="line">        IoBuffer buf = IoBuffer.allocate(value.length()).setAutoExpand(true);</div><div class="line"></div><div class="line">        buf.putString(value, ENCODER);</div><div class="line"></div><div class="line">        buf.flip();</div><div class="line">        out.write(buf);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>我个人觉得这个实现和MINA中的TextLineEncoder实现区别不是很大，为什么要自己定义一个这样的实现？<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">public void encode(IoSession session, Object message, ProtocolEncoderOutput out) throws Exception &#123;</div><div class="line">        CharsetEncoder encoder = (CharsetEncoder) session.getAttribute(ENCODER);</div><div class="line"></div><div class="line">        if (encoder == null) &#123;</div><div class="line">            encoder = charset.newEncoder();</div><div class="line">            session.setAttribute(ENCODER, encoder);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        String value = (message == null ? &quot;&quot; : message.toString());</div><div class="line">        IoBuffer buf = IoBuffer.allocate(value.length()).setAutoExpand(true);</div><div class="line">        buf.putString(value, encoder);</div><div class="line"></div><div class="line">        if (buf.position() &gt; maxLineLength) &#123;</div><div class="line">            throw new IllegalArgumentException(&quot;Line length: &quot; + buf.position());</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        buf.putString(delimiter.getValue(), encoder);</div><div class="line">        buf.flip();</div><div class="line">        out.write(buf);</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>别的filter就不一一细说了。接下来看看真正核心的handler–FtpHandler：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">public interface FtpHandler &#123;</div><div class="line"></div><div class="line">    void init(FtpServerContext context, Listener listener);</div><div class="line"></div><div class="line">    </div><div class="line">    void sessionCreated(FtpIoSession session) throws Exception;</div><div class="line"></div><div class="line">    </div><div class="line">    void sessionOpened(FtpIoSession session) throws Exception;</div><div class="line"></div><div class="line">    </div><div class="line">    void sessionClosed(FtpIoSession session) throws Exception;</div><div class="line"></div><div class="line">    void sessionIdle(FtpIoSession session, IdleStatus status) throws Exception;</div><div class="line"></div><div class="line">    void exceptionCaught(FtpIoSession session, Throwable cause)</div><div class="line">            throws Exception;</div><div class="line"></div><div class="line">    void messageReceived(FtpIoSession session, FtpRequest request)</div><div class="line">            throws Exception;</div><div class="line"></div><div class="line">    void messageSent(FtpIoSession session, FtpReply reply) throws Exception;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这是一个接口，定义了很多看似和MINA中的IoHandler中的很多接口是一模一样的，只是参数不同，一个是IoSession 一个是FtpIoSession，本质上FtpIoSession也是实现了IoSession接口的，可以说是一样的。<br>然而，acceptor的setHandler接受的参数是</p>
<blockquote>
<p>setHandler(org.apache.mina.core.service.IoHandler handler)  </p>
</blockquote>
<p>MINA中的IoHandler，这里我们自己定义的一个Handler是不可以放进去的。于是用了一个adapter来转接：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line">public class FtpHandlerAdapter extends IoHandlerAdapter &#123;</div><div class="line">    private final FtpServerContext context;</div><div class="line"></div><div class="line">    private FtpHandler ftpHandler;</div><div class="line"></div><div class="line">    public FtpHandlerAdapter(FtpServerContext context, FtpHandler ftpHandler) &#123;</div><div class="line">        this.context = context;</div><div class="line">        this.ftpHandler = ftpHandler;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void exceptionCaught(IoSession session, Throwable cause)</div><div class="line">            throws Exception &#123;</div><div class="line">        //发生异常，这里将Iosession重新包装了一下，叫做ftpIoSession，实际上就是实现了IoSession而已</div><div class="line">        FtpIoSession ftpSession = new FtpIoSession(session, context);</div><div class="line">//        然后这个ftpHandler就对包装后的session进行处理，下同</div><div class="line">        ftpHandler.exceptionCaught(ftpSession, cause);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void messageReceived(IoSession session, Object message)</div><div class="line">            throws Exception &#123;</div><div class="line">        FtpIoSession ftpSession = new FtpIoSession(session, context);</div><div class="line">        //将客户端发送的命令抽象成FtpRequest，将message传进去包装成request对象</div><div class="line">        FtpRequest request = new DefaultFtpRequest(message.toString());</div><div class="line">        //处理接受消息事件</div><div class="line">        ftpHandler.messageReceived(ftpSession, request);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void messageSent(IoSession session, Object message) throws Exception &#123;</div><div class="line">        FtpIoSession ftpSession = new FtpIoSession(session, context);</div><div class="line">        //处理消息发送事件</div><div class="line">        ftpHandler.messageSent(ftpSession, (FtpReply) message);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void sessionClosed(IoSession session) throws Exception &#123;</div><div class="line">        FtpIoSession ftpSession = new FtpIoSession(session, context);</div><div class="line">        //session关闭时</div><div class="line">        ftpHandler.sessionClosed(ftpSession);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void sessionCreated(IoSession session) throws Exception &#123;</div><div class="line">        FtpIoSession ftpSession = new FtpIoSession(session, context);</div><div class="line">        MdcInjectionFilter.setProperty(session, &quot;session&quot;, ftpSession.getSessionId().toString());</div><div class="line">        //session创建时，先与创建再有打开</div><div class="line">        ftpHandler.sessionCreated(ftpSession);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void sessionIdle(IoSession session, IdleStatus status)</div><div class="line">            throws Exception &#123;</div><div class="line">        FtpIoSession ftpSession = new FtpIoSession(session, context);</div><div class="line">        //session空闲</div><div class="line">        ftpHandler.sessionIdle(ftpSession, status);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void sessionOpened(IoSession session) throws Exception &#123;</div><div class="line">        FtpIoSession ftpSession = new FtpIoSession(session, context);</div><div class="line">        //session打开，也就是连接打开的时候</div><div class="line">        ftpHandler.sessionOpened(ftpSession);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public FtpHandler getFtpHandler() &#123;</div><div class="line">        return ftpHandler;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setFtpHandler(FtpHandler handler) &#123;</div><div class="line">        this.ftpHandler = handler;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>正真处理session的依旧是我们定义的DefaultFtpHandler。这样设计的意义何在？？我觉得是不要过度依赖于MINA的api吧。或者为了装逼。<br>接下来看看处理session的逻辑：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">public void messageReceived(IoSession session, Object message)</div><div class="line">        throws Exception &#123;</div><div class="line">    FtpIoSession ftpSession = new FtpIoSession(session, context);</div><div class="line">    //将客户端发送的命令抽象成FtpRequest，将message传进去包装成request对象</div><div class="line">    FtpRequest request = new DefaultFtpRequest(message.toString());</div><div class="line">    //处理接受消息事件</div><div class="line">    ftpHandler.messageReceived(ftpSession, request);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div></pre></td><td class="code"><pre><div class="line">public void messageReceived(final FtpIoSession session,</div><div class="line">        final FtpRequest request) throws Exception &#123;</div><div class="line">    try &#123;</div><div class="line">        session.updateLastAccessTime();</div><div class="line">        //将客户端输入命令封装成command对象</div><div class="line">        String commandName = request.getCommand();</div><div class="line">        //这个factory很有意思，是通过factory来创建的</div><div class="line">        //private CommandFactory commandFactory = new CommandFactoryFactory().createCommandFactory();</div><div class="line">        CommandFactory commandFactory = context.getCommandFactory();</div><div class="line">        //这里获得的command根据命令不同获取的cmd对象不同</div><div class="line">        Command command = commandFactory.getCommand(commandName);</div><div class="line"></div><div class="line">        // make sure the user is authenticated before he issues commands</div><div class="line">        if (!session.isLoggedIn()</div><div class="line">                &amp;&amp; !isCommandOkWithoutAuthentication(commandName)) &#123;</div><div class="line">            session.write(LocalizedFtpReply.translate(session, request,</div><div class="line">                    context, FtpReply.REPLY_530_NOT_LOGGED_IN,</div><div class="line">                    &quot;permission&quot;, null));</div><div class="line">            return;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        FtpletContainer ftplets = context.getFtpletContainer();</div><div class="line"></div><div class="line">        FtpletResult ftpletRet;</div><div class="line">        try &#123;</div><div class="line">            ftpletRet = ftplets.beforeCommand(session.getFtpletSession(),</div><div class="line">                    request);</div><div class="line">        &#125; catch (Exception e) &#123;</div><div class="line">            LOG.debug(&quot;Ftplet container threw exception&quot;, e);</div><div class="line">            ftpletRet = FtpletResult.DISCONNECT;</div><div class="line">        &#125;</div><div class="line">        if (ftpletRet == FtpletResult.DISCONNECT) &#123;</div><div class="line">            LOG.debug(&quot;Ftplet returned DISCONNECT, session will be closed&quot;);</div><div class="line">            session.close(false).awaitUninterruptibly(10000);</div><div class="line">            return;</div><div class="line">        &#125; else if (ftpletRet != FtpletResult.SKIP) &#123;</div><div class="line"></div><div class="line">            if (command != null) &#123;</div><div class="line">                synchronized (session) &#123;</div><div class="line">                    command.execute(session, context, request);</div><div class="line">                &#125;</div><div class="line">            &#125; else &#123;</div><div class="line">                session.write(LocalizedFtpReply.translate(session, request,</div><div class="line">                        context,</div><div class="line">                        FtpReply.REPLY_502_COMMAND_NOT_IMPLEMENTED,</div><div class="line">                        &quot;not.implemented&quot;, null));</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            try &#123;</div><div class="line">                ftpletRet = ftplets.afterCommand(</div><div class="line">                        session.getFtpletSession(), request, session</div><div class="line">                                .getLastReply());</div><div class="line">            &#125; catch (Exception e) &#123;</div><div class="line">                LOG.debug(&quot;Ftplet container threw exception&quot;, e);</div><div class="line">                ftpletRet = FtpletResult.DISCONNECT;</div><div class="line">            &#125;</div><div class="line">            if (ftpletRet == FtpletResult.DISCONNECT) &#123;</div><div class="line">                LOG.debug(&quot;Ftplet returned DISCONNECT, session will be closed&quot;);</div><div class="line"></div><div class="line">                session.close(false).awaitUninterruptibly(10000);</div><div class="line">                return;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125; catch (Exception ex) &#123;</div><div class="line"></div><div class="line">        // send error reply</div><div class="line">        try &#123;</div><div class="line">            session.write(LocalizedFtpReply.translate(session, request,</div><div class="line">                    context, FtpReply.REPLY_550_REQUESTED_ACTION_NOT_TAKEN,</div><div class="line">                    null, null));</div><div class="line">        &#125; catch (Exception ex1) &#123;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        if (ex instanceof java.io.IOException) &#123;</div><div class="line">            throw (IOException) ex;</div><div class="line">        &#125; else &#123;</div><div class="line">            LOG.warn(&quot;RequestHandler.service()&quot;, ex);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>对应的一些ftp命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">static &#123;</div><div class="line">        // first populate the default command list</div><div class="line">        DEFAULT_COMMAND_MAP.put(&quot;ABOR&quot;, new ABOR());</div><div class="line">        DEFAULT_COMMAND_MAP.put(&quot;ACCT&quot;, new ACCT());</div><div class="line">        DEFAULT_COMMAND_MAP.put(&quot;APPE&quot;, new APPE());</div><div class="line">        DEFAULT_COMMAND_MAP.put(&quot;AUTH&quot;, new AUTH());</div><div class="line">        /*省略部分*/</div><div class="line">        DEFAULT_COMMAND_MAP.put(&quot;STOR&quot;, new STOR());</div><div class="line">        DEFAULT_COMMAND_MAP.put(&quot;STOU&quot;, new STOU());</div><div class="line">        DEFAULT_COMMAND_MAP.put(&quot;STRU&quot;, new STRU());</div><div class="line">        DEFAULT_COMMAND_MAP.put(&quot;SYST&quot;, new SYST());</div><div class="line">        DEFAULT_COMMAND_MAP.put(&quot;TYPE&quot;, new TYPE());</div><div class="line">        DEFAULT_COMMAND_MAP.put(&quot;USER&quot;, new USER());</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>再看看主要的逻辑：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">if (command != null) &#123;</div><div class="line">    synchronized (session) &#123;</div><div class="line">        command.execute(session, context, request);</div><div class="line">    &#125;</div><div class="line">&#125; else &#123;</div><div class="line">    session.write(LocalizedFtpReply.translate(session, request,</div><div class="line">            context,</div><div class="line">            FtpReply.REPLY_502_COMMAND_NOT_IMPLEMENTED,</div><div class="line">            &quot;not.implemented&quot;, null));</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>将每一个session作为一个锁，保证每个连接的同步操作。具体的execute做了一些什么操作：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">void execute(FtpIoSession session, FtpServerContext context,</div><div class="line">            FtpRequest request) throws IOException, FtpException;</div></pre></td></tr></table></figure></p>
<p>这是一个接口，具体的操作是由这个command是什么决定的。我们挑一个最简单的实现PWD：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">public class PWD extends AbstractCommand &#123;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Execute command</div><div class="line">     */</div><div class="line">    public void execute(final FtpIoSession session,</div><div class="line">            final FtpServerContext context, final FtpRequest request)</div><div class="line">            throws IOException, FtpException &#123;</div><div class="line">        session.resetState();</div><div class="line">        FileSystemView fsview = session.getFileSystemView();</div><div class="line">        String currDir = fsview.getWorkingDirectory().getAbsolutePath();</div><div class="line">        session.write(LocalizedFtpReply.translate(session, request, context,</div><div class="line">                FtpReply.REPLY_257_PATHNAME_CREATED, &quot;PWD&quot;, currDir));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这个命令用来显示当前目录。很容易理解。<br>至此，整个ftp的启动流程都全部梳理完毕，从服务器启动到接受客户端命令，其中的逻辑实际上一点都不复杂。整个服务启动到与客户端交互IoSession都穿插其中，对mina的依赖也不是很明显，当然这是作者刻意将耦合降到最低，这种设计思想值得学习借鉴。<br>接下来就具体探讨各个模块的实现细节。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有了之前的总体小窥后，现在开始细细把玩其中的深邃之处了。&lt;br&gt;其中可以看到有不少的factory，比如FtpServerFactory、ListenerFactory等。通过名字可以看得出来，这些都是用来产生实例的工厂。&lt;br&gt;
    
    </summary>
    
      <category term="Apache Open Project" scheme="http://www.mr-dongw.site/categories/Apache-Open-Project/"/>
    
    
      <category term="源码解读" scheme="http://www.mr-dongw.site/tags/%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/"/>
    
      <category term="Apache" scheme="http://www.mr-dongw.site/tags/Apache/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://www.mr-dongw.site/2017/01/08/hello-world/"/>
    <id>http://www.mr-dongw.site/2017/01/08/hello-world/</id>
    <published>2017-01-08T13:53:01.000Z</published>
    <updated>2017-01-08T13:53:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
  </entry>
  
</feed>
